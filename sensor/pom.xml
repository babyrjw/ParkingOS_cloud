<project
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
	http://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.zld</groupId>
	<artifactId>pcloud</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>pom</packaging>
	<url>http://maven.apache.org</url>
	<properties>
		<!--版本控制 -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    	<spring.version>4.1.1.RELEASE</spring.version>
    	<junit.version>3.8.1</junit.version>
    	<log4j.version>1.2.9</log4j.version>
	</properties>
	<build>
		<pluginManagement>
			<plugins>
				<!-- 生成javadoc文档包的插件 -->  
	            <plugin>  
	                <groupId>org.apache.maven.plugins</groupId>  
	                <artifactId>maven-javadoc-plugin</artifactId>  
	                <version>2.10.2</version>  
	                <configuration>  
	                    <aggregate>true</aggregate>  
	                </configuration>  
	                <executions>  
	                    <execution>  
	                        <id>attach-javadocs</id>  
	                        <goals>  
	                            <goal>jar</goal>  
	                        </goals>  
	                    </execution>  
	                </executions>  
	            </plugin>
				<!-- 打源代码为jar文件 -->  
	            <plugin>  
	            	<groupId>org.apache.maven.plugins</groupId>
	                <artifactId>maven-source-plugin</artifactId>  
	                <version>2.4</version>
	                <executions>
	                	<!-- 每个execution可以用来配置执行一个任务 -->
	                    <execution>
							<id>attach-sources</id>
							<!-- 将目标绑定在生命周期的package阶段上 -->
							<phase>package</phase>
							<goals>
								<!-- jar-no-fork能将项目主代码打包成jar文件 -->
								<goal>jar-no-fork</goal>
							</goals>
						</execution> 
	                </executions>  
	            </plugin>
	            <!-- 打jar包的插件 -->
	            <plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-shade-plugin</artifactId>
					<version>2.4.1</version>
				</plugin>
				<!-- war包插件 -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-war-plugin</artifactId>
					<version>2.4</version>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<!-- 源代码编译版本  -->
					<source>1.6</source>
					<!-- 目标平台编译版本 -->
					<target>1.6</target>
					<!-- 取项目字符集编码 -->
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
			</plugin>
			
		</plugins>
	</build>
	<!-- 部署构件到私服 -->
	<distributionManagement>
		<!-- Nexus的仓库对于匿名用户只是只读的。为了能够部署构件，我们还需要再settings.xml中配置验证信息
		(其中，验证信息中server的id应该与POM中repository的id一致) -->
		<repository>
			<id>local_nexus_releases</id>
			<name>core Release Repository</name>
			<url>http://106.75.7.55:8081/nexus/content/repositories/releases/</url>
		</repository>
		<snapshotRepository>
			<id>local_nexus_snapshots</id>
			<name>core Snapshots Repository</name>
			<url>http://106.75.7.55:8081/nexus/content/repositories/snapshots/</url>
		</snapshotRepository>
	</distributionManagement>
	<!-- dependencyManagement能让子模块继承父模块的配置，但是不会引入实际的依赖，所以还需子模块显示声明依赖，
		但是可以不声明版本号，方便依赖版本的统一管理 -->
	<dependencyManagement>
		<dependencies>
			<!-- springframe start -->
		    <dependency>
		      <groupId>org.springframework</groupId>
		      <artifactId>spring-core</artifactId>
		      <version>${spring.version}</version>
		    </dependency>
		    
		    <dependency>
		      <groupId>org.springframework</groupId>
		      <artifactId>spring-context-support</artifactId>
		      <version>${spring.version}</version>
		    </dependency>
			<!-- 数据库访问封装 -->
		    <dependency>
		      <groupId>org.springframework</groupId>
		      <artifactId>spring-jdbc</artifactId>
		      <version>${spring.version}</version>
		    </dependency>
		    <!-- spring-web -->
		    <dependency>
		      <groupId>org.springframework</groupId>
		      <artifactId>spring-web</artifactId>
		      <version>${spring.version}</version>
		    </dependency>
		    <!-- spring-webmvc -->
	        <dependency>
	            <groupId>org.springframework</groupId>
	            <artifactId>spring-webmvc</artifactId>
	            <version>${spring.version}</version>
	        </dependency>
		    
		    <dependency>
		      <groupId>org.springframework</groupId>
		      <artifactId>spring-test</artifactId>
		      <version>${spring.version}</version>
		    </dependency>
		    <!-- springframe end -->
		</dependencies>
	</dependencyManagement>
	<!-- 以下是一些基础工具包，几乎所有的项目都会使用，所以直接在此声明并且实际引入，简化子项目配置 -->
	<dependencies>
	    <dependency>
	      <groupId>junit</groupId>
	      <artifactId>junit</artifactId>
	      <version>${junit.version}</version>
	      <scope>test</scope>
	    </dependency>
	    <dependency>
		  <groupId>log4j</groupId>
		  <artifactId>log4j</artifactId>
		  <version>${log4j.version}</version>
		</dependency>
		<!-- IO操作工具包 -->
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.4</version>
		</dependency>
		<!-- lang组件主要是一些工具类，涉及到数组工具类，字符串工具类，字符工具类，数学方面，时间日期工具类等，是基础组件。
			另，阿里巴巴java开发规范推荐用commons-lang3而不是commons-lang -->
		<dependency>
		    <groupId>org.apache.commons</groupId>
		    <artifactId>commons-lang3</artifactId>
		    <version>3.0</version>
		</dependency>
		<!-- 对象json字符串转换工具 -->
	    <dependency>
	        <groupId>com.google.code.gson</groupId>
	        <artifactId>gson</artifactId>
	        <version>2.3.1</version>
	    </dependency>
	    <!-- 对象xml字符串转换工具 -->
	    <dependency>
		    <groupId>dom4j</groupId>
		    <artifactId>dom4j</artifactId>
		    <version>1.6.1</version>
		</dependency>
    </dependencies>
	<modules>
		<module>../pcloud_sensor</module>
		<module>../pcloud-upp</module>
	</modules>
</project>